package learners.com;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@RestController
@RequestMapping("/learners")
public class LearnerController {

    @Autowired
    private LearnerService learnerService;

    // Create Learner
    @Operation(summary = "create a new learner")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "created successfully"),
        @ApiResponse(responseCode = "404", description = "learner not found")
    })
    @PostMapping
    public ResponseEntity<Learner> createLearner(@RequestBody Learner learner) {
        Learner createdLearner = learnerService.createLearner(learner);
        return new ResponseEntity<>(createdLearner, HttpStatus.CREATED);
    }

    // Read (Get all Learners with Pagination and Filter by Course Name)
    @Operation(summary = "get all learners with pagination")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "fetched successfully"),
        @ApiResponse(responseCode = "404", description = "learner not found")
    })
    @GetMapping
    public ResponseEntity<Page<Learner>> getAllLearners(
            @RequestParam(required = false) String courseName,
            Pageable pageable) {
        
        Page<Learner> learners = learnerService.getAllLearners(courseName, pageable);
        return new ResponseEntity<>(learners, HttpStatus.OK);
    }

    // Get Single Learner by ID
    @Operation(summary = "get learner by id")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Updated successfully"),
        @ApiResponse(responseCode = "404", description = "learner not found")
    })
    @GetMapping("/{id}")
    public ResponseEntity<Learner> getLearnerById(@PathVariable Long id) {
        Learner learner = learnerService.getLearnerById(id);
        return new ResponseEntity<>(learner, HttpStatus.OK);
    }

    // Update Learner
    @Operation(summary = "Update an existing learner by id")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Updated successfully"),
        @ApiResponse(responseCode = "404", description = "learner not found")
    })
    @PutMapping("/{id}")
    public ResponseEntity<Learner> updateLearner(
            @PathVariable Long id, @RequestBody Learner learnerDetails) {
        Learner updatedLearner = learnerService.updateLearner(id, learnerDetails);
        return new ResponseEntity<>(updatedLearner, HttpStatus.OK);
    }

    // Delete Learner
    @Operation(summary = "delete an existing learner by id")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Updated successfully"),
        @ApiResponse(responseCode = "404", description = "learner not found")
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteLearner(@PathVariable Long id) {
        learnerService.deleteLearner(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
