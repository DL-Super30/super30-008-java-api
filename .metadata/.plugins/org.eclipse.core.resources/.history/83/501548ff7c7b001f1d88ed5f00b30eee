package user.com;

import org.springframework.boot.autoconfigure.security.SecurityProperties;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); // Instantiate here

    // Constructor for dependency injection
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    // Create a new user and encrypt password
    public SecurityProperties.User createUser(SecurityProperties.User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword())); // Encrypt password
        return userRepository.save(user);
    }

    // Fetch all users
    public List<User> findAll() {
        return userRepository.findAll();
    }

    // Fetch user by ID
    public Optional<User> findById(Long id) {
        return userRepository.findById(id);
    }

    // Delete a user by ID
    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }

    // Update an existing user (you may want to implement this)
    public void updateUser(Long id, SecurityProperties.User userDetails) {
        // TODO: Implement user update logic here
    }
}
