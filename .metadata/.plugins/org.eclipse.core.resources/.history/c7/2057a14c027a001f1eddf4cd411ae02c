package lead.com;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class LeadService {

    @Autowired
    private LeadRepository leadRepository;

    // Create a new lead
    public LeadEntity createLead(LeadEntity lead) {
        return leadRepository.save(lead);
    }

    // Retrieve all leads
    public List<LeadEntity> getAllLeads() {
        return leadRepository.findAll();
    }

    // Retrieve a lead by ID
    public LeadEntity getLeadById(int id) {
        return leadRepository.findById(id).orElse(null);
    }

    // Update a lead
    public LeadEntity updateLead(int id, LeadEntity updatedLead) {
        Optional<LeadEntity> existingLeadOpt = leadRepository.findById(id);
        if (existingLeadOpt.isPresent()) {
            LeadEntity existingLead = existingLeadOpt.get();

            // Update fields of existing lead
            existingLead.setName(updatedLead.getName());
            existingLead.setCc(updatedLead.getCc());
            existingLead.setPhone(updatedLead.getPhone());
            existingLead.setEmail(updatedLead.getEmail());
            existingLead.setFeeQuoted(updatedLead.getFeeQuoted());
            existingLead.setLeadStatus(updatedLead.getLeadStatus());
            existingLead.setLeadSource(updatedLead.getLeadSource());
            existingLead.setStack(updatedLead.getStack());
            existingLead.setCourse(updatedLead.getCourse());
            existingLead.setClassMode(updatedLead.getClassMode());
            existingLead.setNextFollowUp(updatedLead.getNextFollowUp());
            existingLead.setDescription(updatedLead.getDescription());

            return leadRepository.save(existingLead);
        }
        return null; // Return null if lead not found
    }

    // Delete a lead by ID
    public void deleteLead(int id) {
        leadRepository.deleteById(id);
    }
}
