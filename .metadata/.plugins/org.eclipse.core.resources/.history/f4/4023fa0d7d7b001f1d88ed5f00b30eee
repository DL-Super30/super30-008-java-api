package user.com;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.SecurityProperties;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    // GET: Fetch all users
    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.findAll();
        return ResponseEntity.ok(users);
    }

    // GET: Fetch user by ID
    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        Optional<User> user = userService.findById(id);
        return user.map(ResponseEntity::ok)
                   .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // POST: Create a new user
  //  @PostMapping
    //public ResponseEntity<User> createUser(@RequestBody User user) {
       // User createdUser = userService.createUser(user);
       // return ResponseEntity.ok(createdUser);
   // }

    // PUT: Update an existing user
  //  @PutMapping("/{id}")
   // public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User userDetails) {
       // Optional<User> updatedUser = userService.updateUser(id, userDetails);
       // return updatedUser.map(ResponseEntity::ok)
                         // .orElseGet(() -> ResponseEntity.notFound().build());
   // }

    // DELETE: Delete a user by ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build(); // 204 No Content
    }


// POST: Create a new user
@PostMapping
public ResponseEntity<SecurityProperties.User> createUser(@RequestBody SecurityProperties.User user) {
    SecurityProperties.User createdUser = userService.createUser(user);
    return ResponseEntity.ok(createdUser);
}

// PUT: Update an existing user
@PutMapping("/{id}")
public ResponseEntity<SecurityProperties.User> updateUser(@PathVariable Long id, @RequestBody SecurityProperties.User userDetails) {
    Optional<SecurityProperties.User> updatedUser = Optional.empty();
    return updatedUser.map(ResponseEntity::ok)
                      .orElseGet(() -> ResponseEntity.notFound().build());
}
}
