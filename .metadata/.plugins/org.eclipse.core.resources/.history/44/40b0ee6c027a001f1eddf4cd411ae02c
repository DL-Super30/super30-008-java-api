package lead.com;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/lead")
public class LeadController {

    @Autowired
    private LeadService leadService;

    // Create a new lead
    @Operation(summary = "Create a new lead")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Lead created successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid request")
    })
    @PostMapping("/create")
    public ResponseEntity<LeadEntity> createLead(@RequestBody LeadEntity lead) {
        LeadEntity createdLead = leadService.createLead(lead);
        return new ResponseEntity<>(createdLead, HttpStatus.CREATED);
    }

    // Get all leads
    @Operation(summary = "Fetch list of leads", description = "Fetch all leads with pagination support.")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Fetched successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid pagination parameters")
    })
    @GetMapping("/all")
    public ResponseEntity<List<LeadEntity>> getAllLeads() {
        List<LeadEntity> leads = leadService.getAllLeads();
        return new ResponseEntity<>(leads, HttpStatus.OK);
    }

    // Get a lead by ID
    @Operation(summary = "Get a lead by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Fetched successfully"),
        @ApiResponse(responseCode = "404", description = "Lead not found")
    })
    @GetMapping("/{id}")
    public ResponseEntity<LeadEntity> getLeadById(@PathVariable int id) {
        LeadEntity lead = leadService.getLeadById(id);
        if (lead.isPresent()) {
            return new ResponseEntity<>(lead.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Update a lead by ID
    @Operation(summary = "Update an existing lead by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Updated successfully"),
        @ApiResponse(responseCode = "404", description = "Lead not found")
    })
    @PutMapping("/{id}")
    public ResponseEntity<LeadEntity> updateLead(@PathVariable int id, @RequestBody LeadEntity updatedLead) {
        LeadEntity lead = leadService.updateLead(id, updatedLead);
        return new ResponseEntity<>(lead, HttpStatus.OK);
    }

    // Delete a lead by ID
    @Operation(summary = "Delete an existing lead by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "Deleted successfully"),
        @ApiResponse(responseCode = "404", description = "Lead not found")
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteLead(@PathVariable int id) {
        leadService.deleteLead(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
