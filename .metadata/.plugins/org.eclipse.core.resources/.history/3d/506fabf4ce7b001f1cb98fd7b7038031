package learners.com;

import org.springdoc.core.converters.models.Sort;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;

import java.util.Optional;

@RestController
@RequestMapping("/api/learners")
public class LearnerController {

    @Autowired
    private LearnerService learnerService;
    @Operation(summary = "Create a new learner")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "learner created successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid request")
    })
    @PostMapping
    public ResponseEntity<Learner> createLearner(@Valid @RequestBody Learner learner) {
        Learner createdLearner = learnerService.saveLearner(learner);
        return ResponseEntity.ok(createdLearner);
    }
    @Operation(summary = "fetch all learners")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "fetched successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid request")
    })
  
    
        @GetMapping
        public Page<Learner> getAllLearners(
                @RequestParam(defaultValue = "0") int page,
                @RequestParam(defaultValue = "10") int size,
                @RequestParam(defaultValue = "id,asc") String[] sort) {

            // Create Sort object based on input
            Sort sortOrder = Sort.by(Sort.Order.asc(sort[0]));  // For ascending order
            if (sort.length > 1 && sort[1].equalsIgnoreCase("desc")) {
                sortOrder = Sort.by(Sort.Order.desc(sort[0]));  // For descending order
            }

            Pageable pageable = PageRequest.of(page, size, sortOrder);
            return learnerService.findAll(pageable);
        }
    

    public ResponseEntity<Page<Learner>> getAllLearners(@RequestParam(required = true) String name, Pageable pageable) {
        Page<Learner> learners = learnerService.searchLearners(name, pageable);
        return ResponseEntity.ok(learners);
    }
    @Operation(summary = "get learner by id")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "fetched learner by id successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid request")
    })
    @GetMapping("/{id}")
    public ResponseEntity<Learner> getLearnerById(@PathVariable(value = "id") Long learnerId) {
        Optional<Learner> learner = learnerService.getLearnerById(learnerId);
        return learner.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }
    @Operation(summary = "update learner")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "updated successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid request")
    })
    @PutMapping("/{id}")
    public ResponseEntity<Learner> updateLearner(@PathVariable(value = "id") Long learnerId, @Valid @RequestBody Learner learnerDetails) {
        Learner updatedLearner = learnerService.updateLearner(learnerId, learnerDetails);
        return ResponseEntity.ok(updatedLearner);
    }
    @Operation(summary = "delete learner")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "deleted  successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid request")
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteLearner(@PathVariable(value = "id") Long learnerId) {
        learnerService.deleteLearner(learnerId);
        return ResponseEntity.noContent().build();
    }
}
